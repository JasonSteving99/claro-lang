diff --git a/cup/cup.bzl b/cup/cup.bzl
index 58f2fa3..e1a5bc5 100644
--- a/cup/cup.bzl
+++ b/cup/cup.bzl
@@ -11,22 +11,23 @@
 def _cup_impl(ctx):
     """ Generates a Java parser from a CUP definition, using Java CUP. """

-    # Output directory is bazel-genfiles/package, regardless of Java package defined in
-    # the grammar
-    output_dir = "/".join(
-        [ctx.configuration.genfiles_dir.path, ctx.label.package],
-    )
+    ### PATCH FOR CLARO LANG TO BE ABLE TO BUILD VIA DOWNSTREAM DEPENDENCY. ###
+    parser_file = ctx.actions.declare_file(ctx.attr.parser + ".java")
+    output_dir = parser_file.path[:-len(parser_file.basename)]
     args = []
     args.extend(["-parser", ctx.attr.parser])
     args.extend(["-symbols", ctx.attr.symbols])
     args.extend(["-destdir", output_dir])
     args.extend(["-nosummary"])
+
+    ### PATCH FOR CLARO LANG TO BE ABLE TO HACK AT SOME EXPERIMENTAL GRAMMAR PRODUCTIONS ###
+    args.extend(["-expect", str(ctx.attr.expected_conflicts)])
+
     if ctx.attr.interface:
         args.append("-interface")
     args.extend([ctx.file.src.path])

-    # TODO(regisd): Add support for CUP options.
-    parser_file = ctx.actions.declare_file(ctx.attr.parser + ".java")
+    # TODO(regisd): Add support for CUP options. YOU'RE WELCOME regisd@ -clarolang
     sym_file = ctx.actions.declare_file(ctx.attr.symbols + ".java")
     ctx.actions.run(
         mnemonic = "cup",
@@ -47,12 +48,15 @@ cup = rule(
             mandatory = True,
             doc = "The CUP grammar specification",
         ),
+
+        ### PATCH FOR CLARO LANG TO WORKAROUND JAVA CODE SIZE LIMITATIONS IN CUP GENERATED CODE ###
         "cup_bin": attr.label(
-            default = Label("//third_party/cup:cup_bin"),
+                default = Label("@claro-lang//patched_jcup:patched_cup_bin"),
             executable = True,
             cfg = "host",
-            doc = "The java_binary of CUP",
+            doc = "The java_binary of CUP (patched by Jason Steving to workaround Java code size limitation)",
         ),
+
         "parser": attr.string(
             default = "parser",
             doc = "Name of the generated parser class",
@@ -64,6 +68,13 @@ cup = rule(
         "interface": attr.bool(
             doc = "Outputs the symbol constant code as an interface rather than as a class.",
         ),
+
+        ### PATCH FOR CLARO LANG TO BE ABLE TO HACK AT SOME EXPERIMENTAL GRAMMAR PRODUCTIONS ###
+        "expected_conflicts": attr.int(
+            default = 0,
+            doc = "The expected number of conflicts.",
+        ),
     },
     output_to_genfiles = True,  # JFlex generates java files, not bin files
 )
+
