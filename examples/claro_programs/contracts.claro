contract BinaryMathOps<T, V, R> {
  function add(lhs: T, rhs: V) -> R;
  function multiply(lhs: T, rhs: V) -> R;
}

implement BinaryMathOps<int, int, int> {
  function add(lhs: int, rhs: int) -> int {
    return lhs + rhs;
  }

  function multiply(lhs: int, rhs: int) -> int {
    return lhs * rhs;
  }
}

implement BinaryMathOps<string, string, string> {
  function add(lhs: string, rhs: string) -> string {
    return "{lhs}{rhs}";
  }

  function multiply(lhs: string, rhs: string) -> string {
    # I'm not really sure what multiply means between two strings so....
    return "\"{lhs}\" * \"{rhs}\"";
  }
}

alias IntFn : function<int -> int>

implement BinaryMathOps<IntFn, int, IntFn> {
  function add(lhs: function<int -> int>, rhs: int) -> function<int -> int> {
    return x -> lhs(x) + rhs;
  }

  function multiply(lhs: function<int -> int>, rhs: int) -> function<int -> int> {
    return x -> lhs(x) * rhs;
  }
}

####################################################################################################
# DEMONSTRATE CALLING CONTRACT PROCEDURES
#
# All expr types are always able to be statically inferred (since Claro will *never* support
# nominal subtyping and does not yet support the planned oneof<Foo, Bar, ...> type). So, Claro
# takes advantage of this to statically infer which contract implementation to dispatch to at
# compile-time.
####################################################################################################

print("--------------------------------------------------------------------------------");
print("Testing BinaryMathOps<int, int, int>::add");
var intRes: int = BinaryMathOps::add(2, 98);
print(intRes);
print("Testing BinaryMathOps<int, int, int>::multiply");
intRes = BinaryMathOps::multiply(2, 98);
print(intRes);

print("--------------------------------------------------------------------------------");
print("Testing BinaryMathOps<string, string, string>::add");
var stringRes: string = BinaryMathOps::add("Age: ", "twenty-eight");
print(stringRes);
print("Testing BinaryMathOps<string, string, string>::multiply");
stringRes = BinaryMathOps::multiply("Age: ", "twenty-eight");
print(stringRes);

print("--------------------------------------------------------------------------------");
print("Testing BinaryMathOps<function<int -> int>, int, function<int -> int>>::add");
var modifiedFuncRes: IntFn = BinaryMathOps::add(cast(IntFn, x -> x), 10);
print(modifiedFuncRes(90));
print("Testing BinaryMathOps<function<int -> int>, int, function<int -> int>>::multiply");
modifiedFuncRes = BinaryMathOps::multiply(cast(IntFn, x -> x), 10);
print(modifiedFuncRes(90));

# This should give you a hint as to how Claro will utilize Contracts as the basis for Generics via
# a clever but simple technique known as "monomorphization".
function foo(i: int) -> int {
  return BinaryMathOps::add(i, i);
}
function bar(s: string) -> string {
  return BinaryMathOps::add(s, s);
}
print("--------------------------------------------------------------------------------");
print(foo(900000));
print(bar("sup "));

implement BinaryMathOps<int, int, string> {
  function add(lhs: int, rhs: int) -> string {
    var intAdditionRes: int = BinaryMathOps::add(lhs, rhs);
    return "Integer Addition Res String: {intAdditionRes}";
  }
  function multiply(lhs: int, rhs: int) -> string {
    var intMultRes: int = BinaryMathOps::multiply(lhs, rhs);
    return "Integer Multiplication Res String: {intMultRes}";
  }
}
print("--------------------------------------------------------------------------------");
print("Testing BinaryMathOps<int, int, string>::add");
print(cast(string, BinaryMathOps::add(1, 99)));
print("...again using inference.");
var intintstringres: string = BinaryMathOps::add(100, 28);
print(intintstringres);

#########################################################################
## A FEW GENERICS EXAMPLES!!
#########################################################################

requires(BinaryMathOps<T,V,R>)
function pairwiseSum<T, V, R>(ttuple: tuple<T, T>, vtuple: tuple<V, V>) -> tuple<R, R> {
  var res1: R = BinaryMathOps::add(ttuple[0], vtuple[0]);
  var res2: R = BinaryMathOps::add(ttuple[1], vtuple[1]);
  return (res1, res2);
}

print("----------------------------------------------------------");
print("Testing Generic function pairwiseSum<string, string, string>:");
var ttuple: tuple<string, string> = ("Hello, generic ", "This is ");
var vtuple: tuple<string, string> = ("Claro world!", "effing sweet.");
var firstGenericResult: tuple<string, string> = pairwiseSum(ttuple, vtuple);
print(firstGenericResult[0]);
print(firstGenericResult[1]);

print("----------------------------------------------------------");
print("Testing Generic function pairwiseSum<int, int, int>:");
var ttuple3: tuple<int, int> = (1, 99);
var vtuple3: tuple<int, int> = (99, 1);
var thirdGenericResult: tuple<int, int> = pairwiseSum(ttuple3, vtuple3);
print(thirdGenericResult[0]);
print(thirdGenericResult[1]);


####################################################################################################
# DEMONSTRATE CONTRACTS THAT INCLUDE GENERIC SIGNATURES
####################################################################################################

contract Foo<T> {
  function doIt<V>(t: T, v: V) -> tuple<T, V>;
}

implement Foo<int> {
  function doIt<V>(t: int, v: V) -> tuple<int, V> {
    return (2 * t, v);
  }
}
implement Foo<string> {
  function doIt<V>(t: string, v: V) -> tuple<string, V> {
    return ("formatted: {t}", identity(v));
  }
}

# Just ensuring that we're still able to call other generic procedures from within generic contract procedures.
function identity<A>(a: A) -> A { return a; }

print("----------------------------------------------------------");
print("Testing Foo::doIt<T>:");
var t = Foo::doIt(10, "ten");
type(t);
print(t);
var t2 = Foo::doIt(10, ["ten"]);
type(t2);
print(t2);
var t3 = Foo::doIt("10", ["ten"]);
type(t3);
print(t3);


####################################################################################################
# DEMONSTRATE CONTRACTS THAT INCLUDE BOTH BLOCKING-GENERICS AND GENERIC TYPE PARAMS
####################################################################################################

contract Bar<O> {
  blocking:mapFn function doIt<I>(i: I, mapFn: blocking? function<I -> O>) -> O;
  blocking function doItBlocking<I>(i: I, mapFn: blocking function<I -> O>) -> O;
}
implement Bar<int> {
  blocking:mapFn function doIt<I>(i: I, mapFn: blocking? function<I -> int>) -> int {
    return mapFn(i);
  }
  blocking function doItBlocking<I>(i: I, mapFn: blocking function<I -> int>) -> int {
    return mapFn(i);
  }
}

graph function testGraph(i: int) -> future<int> {
  root res <- cast(int, Bar::doIt(@imm, (x: int) -> int { return 2 * x; }));
# Uncomment this line to get an error message indicating that you're not allowed to call blocking procedures from here.
#  root res <- (int) Bar::doIt(@imm, blocker);
  node imm <- i;
}
blocking function blocker(i: int) -> int {
  var res <-| testGraph(i);
  return res;
}

print("----------------------------------------------------------");
print("Testing Blocking Generics with Bar<T>::doIt");
print(Bar::doIt(2, (x: int) -> int { return 2 * x; }));
print(Bar::doIt(2, blocker));

print("----------------------------------------------------------");
print("Testing Blocking Function Bar<T>::doItBlocking");
print(Bar::doItBlocking(2, blocker));
# Uncomment this line to get a type mismatch error indicating that a blocking function is expected.
#print(Bar::doItBlocking(2, (x: int) -> int { return 2 * x; }));



####################################################################################################
# DEMONSTRATE A CONTRACT THAT INCLUDES EVERY TYPE OF CONSUMER SIGNATURE
####################################################################################################

contract Consumes<T> {
  consumer prefixPrint(prefix: string, t: T);
  blocking consumer doBlocking(doFn: blocking consumer<T>);
  blocking:doFn consumer doBlockingGen(doFn: blocking? consumer<T>);
  consumer genPrefixPrint<P>(prefix: P, t: T);
  blocking consumer genDoBlocking<A>(ignored: T, arg: A, doFn: blocking consumer<A>);
  blocking:doFn consumer genDoBlockingGen<A>(ignored: T, arg: A, doFn: blocking? consumer<A>);
}
implement Consumes<int> {
  consumer prefixPrint(prefix: string, t: int) {
    print("{prefix}: {t}");
  }
  blocking consumer doBlocking(doFn: blocking consumer<int>) {
    doFn(-1);
  }
  blocking:doFn consumer doBlockingGen(doFn: blocking? consumer<int>) {
    doFn(-1);
  }
  consumer genPrefixPrint<P>(prefix: P, t: int) {
    print("{prefix}: {t}");
  }
  blocking consumer genDoBlocking<T>(ignored: int, arg: T, doFn: blocking consumer<T>) {
    _ = ignored;
    print("called Consumes<int>::genDoBlocking");
    doFn(arg);
  }
  blocking:doFn consumer genDoBlockingGen<T>(ignored: int, arg: T, doFn: blocking? consumer<T>) {
    _ = ignored;
    print("called Consumes<int>::genDoBlockingGen");
    doFn(arg);
  }
}
implement Consumes<string> {
  consumer prefixPrint(prefix: string, t: string) {
    print("{prefix}: {t}");
  }
  blocking consumer doBlocking(doFn: blocking consumer<string>) {
    doFn("-1");
  }
  blocking:doFn consumer doBlockingGen(doFn: blocking? consumer<string>) {
    doFn("-1");
  }
  consumer genPrefixPrint<P>(prefix: P, t: string) {
    print("{prefix}: {t}");
  }
  blocking consumer genDoBlocking<T>(ignored: string, arg: T, doFn: blocking consumer<T>) {
    _ = ignored;
    print("called Consumes<string>::genDoBlocking");
    doFn(arg);
  }
  blocking:doFn consumer genDoBlockingGen<T>(ignored: string, arg: T, doFn: blocking? consumer<T>) {
    _ = ignored;
    print("called Consumes<string>::genDoBlockingGen");
    doFn(arg);
  }
}

print("----------------------------------------------------------");
print("Testing Consumer Consumes<T>::prefixPrint");
Consumes::prefixPrint("Contract Consumer Call", 1);
Consumes::prefixPrint("Contract Consumer Call", "two");
print("----------------------------------------------------------");
print("Testing Blocking Consumer Consumes<T>::doBlocking");
Consumes::doBlocking(blockingIntConsumer);
Consumes::doBlocking(blockingStrConsumer);
blocking consumer blockingIntConsumer(i: int) {
  print("called blocking int consumer");
  var res <-| testGraph(i);
  _ = res;
}
blocking consumer blockingStrConsumer(s: string) {
  _ = s;
  print("called blocking string consumer");
  var res <-| testGraph(-1);
  _ = res;
}
print("----------------------------------------------------------");
print("Testing Blocking-Generic Consumer Consumes<T>::doBlockingGen");
Consumes::doBlockingGen(blockingIntConsumer);
Consumes::doBlockingGen(lambda (x:int) -> { print("called non-blocking int consumer"); _ = x; });
Consumes::doBlockingGen(blockingStrConsumer);
Consumes::doBlockingGen(lambda (x:string) -> { print("called non-blocking string consumer"); _ = x; });
print("----------------------------------------------------------");
print("Testing Generic Consumer Consumes<T>::genPrefixPrint");
Consumes::genPrefixPrint("Generic Contract Consumer Call", 1);
Consumes::genPrefixPrint(1, 1);
Consumes::genPrefixPrint("Generic Contract Consumer Call", "two");
Consumes::genPrefixPrint(2, "two");
print("----------------------------------------------------------");
print("Testing Generic, Blocking Consumer Consumes<T>::genDoBlocking");
Consumes::genDoBlocking(1, 1, blockingIntConsumer);
Consumes::genDoBlocking(2, "two", blockingStrConsumer);
Consumes::genDoBlocking("three", 1, blockingIntConsumer);
Consumes::genDoBlocking("four", "two", blockingStrConsumer);
print("----------------------------------------------------------");
print("Testing Generic, Blocking-Generic Consumer Consumes<T>::genDoBlockingGen");
Consumes::genDoBlockingGen(1, 1, blockingIntConsumer);
Consumes::genDoBlockingGen(2, 2, lambda (x:int) -> { print("called non-blocking int consumer"); _ = x; });
Consumes::genDoBlockingGen("three", "three", blockingStrConsumer);
Consumes::genDoBlockingGen("four", "four", lambda (x:string) -> { print("called non-blocking string consumer"); _ = x; });

print("----------------------------------------------------------");
print("Testing calling contract consumer from within generic procedure def");
# Of course, generic procedures may defer to contract consumers.
requires(Consumes<T>, BinaryMathOps<T, T, T>)
consumer genericConsumer<T>(t: T) {
  Consumes::prefixPrint("DEFERRED", t);
  _ = cast(T, BinaryMathOps::add(t, t));
}
genericConsumer(3);
genericConsumer("three");


####################################################################################################
# DEMONSTRATE A CONTRACT THAT INCLUDES EVERY TYPE OF PROVIDER SIGNATURE
####################################################################################################

contract Default<T> {
  provider get() -> T;
  blocking provider getBlocking() -> T;
}
implement Default<int> {
  provider get() -> int {
    return 0;
  }
  blocking provider getBlocking() -> int {
    var blockedVal <-| testGraph(1); # Just do some random blocking operation.
    _ = blockedVal;
    return Default::get();
  }
}
implement Default<string> {
  provider get() -> string {
    return "--DEFAULT STRING--";
  }
  blocking provider getBlocking() -> string {
    var blockedVal <-| testGraph(1); # Just do some random blocking operation.
    _ = blockedVal;
    return Default::get();
  }
}


print("----------------------------------------------------------");
print("Testing Provider Default<T>::get");
var defaultInt: int = Default::get();
print(defaultInt);
type(defaultInt);
var defaultStr: string = Default::get();
print(defaultStr);
type(defaultStr);

print("----------------------------------------------------------");
print("Testing Provider Default<T>::getBlocking");
defaultInt = Default::getBlocking();
print(defaultInt);
defaultStr = Default::getBlocking();
print(defaultStr);

requires(Default<A>)
function defaultList<A>(size: int) -> mut [A] {
  var res: mut [A] = mut [];
  var i = 0;
  while (i++ < size) {
    lists::add(res, Default::get());
  }
  return res;
}

print("----------------------------------------------------------");
print("Testing Generic Function defaultList<A> requiring Default<A>");
var intsList: mut [int] = defaultList(10);
print(intsList);
type(intsList);
var strsList: mut [string] = defaultList(2);
print(strsList);

requires(Default<V>)
function getOrDefault<K,V>(map: mut {K: V}, key: K) -> V {
  if (key in map) {
    return map[key];
  }
  map[key] = Default::get();
  return map[key];
}

print("----------------------------------------------------------");
print("Testing Generic Function getOrDefault<K,V> requiring Default<V>");
print(cast(int, getOrDefault(cast(mut {string: int}, mut {}), "foo")));

var myMap: mut {string: int} = mut {};
print(myMap);
print("\"foo\" in myMap: {"foo" in myMap}");
print(getOrDefault(myMap, "foo"));
print("\"foo\" in myMap: {"foo" in myMap}");
myMap["foo"] = 99;
print(myMap["foo"]);
print(getOrDefault(myMap, "bar"));
print(myMap);


print("----------------------------------------------------------");
print("Testing Generic Provider defaultPair<A,B> requiring Default<A>, Default<B>");

requires(Default<A>, Default<B>)
provider defaultPair<A,B>() -> tuple<A, B> {
  return (Default::get(), Default::get());
}

var defTup: tuple<int, string> = defaultPair();
print(defTup);
var defTup2: tuple<string, int> = defaultPair();
print(defTup2);

print("----------------------------------------------------------");
print("Testing Generic Blocking Provider defaultPairBlocking<A,B> requiring Default<A>, Default<B>");

requires(Default<A>, Default<B>)
blocking provider defaultPairBlocking<A,B>() -> tuple<A, B> {
  return (Default::getBlocking(), Default::getBlocking());
}

defTup = defaultPairBlocking();
print(defTup);
defTup2 = defaultPairBlocking();
print(defTup2);