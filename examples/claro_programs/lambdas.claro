# Lambda Expr syntax does not carry type annotations, so their type signature must either be constrained by
# its surrounding context, OR explicitly annotated.
var firstLambda: function<string -> string> = x -> x;
print(firstLambda("Claro supports lambdas!"));

# You may alternatively cast the type of the lambda expression (which is used as a static type hint and does
# not result in a runtime type cast).
var secondLambda = cast(function<string -> string>, x -> x);
print(secondLambda("And they're really easy to work with!"));

####################################################################################################
# DEMONSTRATE LAMBDA CAPTURES REQUIRED TO BE IMMUTABLE
#
# In order to prevent Lambdas from being something that introduces "spooky action at a distance" to
# the language, all variables captured by a lambda are required to be deeply-immutable, else, a
# compile error is issued. (A previous version of this would auto-copy all mutable captured values
# and coerce them to a deeply-immutable type, but the implicit copy would be yet another foot gun,
# this time with performance implications. So instead, you're required to do an explicit copy and
# coercion to a deeply-immutable variant if you'd like to close over some value that was originally
# mutable. This keeps with Claro's guiding spirit of clear, easily understandable semantics).
#
# This may seem like an extremely overly aggressive stance that overly restricts lambdas, however,
# this is foundational as something that preserves the powerful property that all Graph Procedures
# are data-race free by construction.
####################################################################################################

var valid = "This immutable string is a valid capture.";
var capturingLambda = lambda () -> string {
  return "The following string was captured by this lambda:\n\t\t- \"{valid}\"";
};
print(capturingLambda());


## UNCOMMENT THE BELOW EXAMPLE TO SEE THE BEHAVIOR THAT IS NOW FORBIDDEN IN CLARO LAMBDAS.

#var l: mut [int] = mut [1];
#
#var getAndIncr = lambda () -> int {
#  var res = l[0];
#  l[0] = l[0] + 1;
#  return res;
#};
#
#print(l);             # mut [1]
#print(getAndIncr());  # 1
#print(getAndIncr());  # 2
#print(getAndIncr());  # 3
#print(l);             # mut [4] "Spooky Action at a Distance" mutating `l` on the lines above when `l` was never directly referenced.

# ONE WAY TO ACHIEVE THE MORE "TRADITIONAL" LAMBDA SEMANTICS OF CAPTURED STATE, WOULD BE THE BELOW WORKAROUND. I find
# this to be a *BEAUTIFUL* solution literally BECAUSE of the fact that it is so explicit. You should have to be *very*
# intentional to simulate things that could be potentially problematic. And the incredible thing is that even though you
# may now simulate this functionality, Claro is STILL able to reject unsafe use of it within Graph Procedures!
newtype ClosureFn<State, Out> : struct {
  state: State,
  fn: function<State -> Out>
}

contract ClosureProvider<State, Out> {
  function get(closureFn: ClosureFn<State, Out>) -> Out;
}

implement ClosureProvider<mut [int], int> {
  function get(closureFn: ClosureFn<mut [int], int>) -> int {
    var toApply = unwrap(closureFn).fn;
    return toApply(unwrap(closureFn).state);
  }
}

var mutList = mut [1];
var getAndIncrClosure: ClosureFn<mut [int], int> =
  ClosureFn({
    state = mutList,
    fn = l -> {
      var res = l[0];
      l[0] = l[0] + 1;
      return res;
    }
  });

print("----------------------------------------");
print("Demo manual closure semantics.");
print(mutList);                                 # mut [1]
print(ClosureProvider::get(getAndIncrClosure)); # 1
print(ClosureProvider::get(getAndIncrClosure)); # 2
print(ClosureProvider::get(getAndIncrClosure)); # 3
print(mutList);                                 # mut [4] "Spooky Action at a Distance" mutating `mutList` on the lines above when `mutList` was never directly referenced.




########################################################################################################################
# DEMONSTRATE SOME MORE SOMEWHAT RANDOM USAGES
########################################################################################################################

print("----------------------------------------");

consumer testPassingLambdasAsArgs(x: int, f: function<int -> int>) {
  print(f(x));
}

testPassingLambdasAsArgs(
  900,
  x -> 2 * x);


function foo(x: int, f: function<int -> int>) -> int {
  return f(x);
}

print(foo(2, y -> -5 * y) + foo(10, x -> 10 * x));
print(foo(2, y -> -5 * y));
print(foo(10, x -> 10 * x));


# Lambdas can capture state defined before them.
var i = "hello";
print(
  foo(
    111,
    z -> {
      print(i);
      # And you can even recursively use lambdas w/in lambdas.
      testPassingLambdasAsArgs(100000, x -> x);
      return z;
    }
  )
);

provider testProcedureCanReturnLambda() -> function<int -> int> {
#  var f: function<int -> int> = x -> x;
#  return f;
  return x -> x;
}

var returnedLambda = testProcedureCanReturnLambda();
print(returnedLambda(8));

# Lambdas can be defined within procedure bodies as well.
function testLambdasWithinProcedureBodies(x: int) -> string {
  testPassingLambdasAsArgs(x, arg1 -> 100 * arg1);
  return "returns work even after lambda return";
}
print(testLambdasWithinProcedureBodies(23));


# This shows the power of lambdas in Claro. You can even now define your own partial application function.
function partial(first: int, f: function<|int, int| -> int>) -> function<int -> int> {
  return second -> {
    # This variable is here just to show off that Claro supports multi-line lambdas too!
    var res = f(first, second);
    return res;
  };
}

var add10 = partial(10, lambda (first, second) -> {return first + second;});
print(add10(20));  # 30
print(add10(30));  # 40

# Type Aliases make type declarations like this one easier to read.
alias IntFunction : function<int -> int>
alias IntBiFunction : function<|int, int| -> int>
var partialLambda: function<|int, IntBiFunction| -> IntFunction> =
  lambda (first, l) -> second -> l(first, second);
type(partialLambda);  # function<|int, function<|int, int| -> int>| -> function<int -> int>>

var add10Partial = partialLambda(10, lambda (first, second) -> first + second);
print(add10Partial(100));  # 110

# Lambda Provider Functions are supported.
var testP: provider<string> = () -> "yay!"; # This would be much more useful if it was taking user input...
# Lambda Consumer Functions are supported as well.
var testC: consumer<string> = s -> { print(testP); print(s); };
testC(testP());

# Probably the most important characteristic of Lambdas is their scope "Capturing" semantics.
# The below example shows that lambdas are able to reference variables that are initialized in outer
# scopes, but they "Capture" the current value of that variable, rather than a true "Closure" over
# that variable. I'd argue that a true "Closure" where the variable itself travels with the lambda
# would do nothing but lead to ErrorProne code. Instead, "Captured Variables" are better thought of
# as variables implicitly passed as constructor arguments to the underlying Lambda object (take this
# as your reminder that Lambdas are objects if you've forgotten that).

var testOuterScopeVar = -1;
var p: provider<int> = () -> {return testOuterScopeVar;};
testOuterScopeVar = 99;
print(p());
provider testOuterScopeInFunction() -> provider<int> {
  var testFunctionOuterScopeVar = 1;
  # Lambdas are able to capture values defined in outer function scopes as well.
  var p: provider<int> = () -> 99 + testFunctionOuterScopeVar;
  # Unlike java, you can keep using variables as usual even after their values were captured in a lambda.
  # This has no effect on the value that was captured in the lambda body.
  testFunctionOuterScopeVar++;
  print(testFunctionOuterScopeVar);
  return p;
}
p = testOuterScopeInFunction();
print(p());
print(testOuterScopeVar);


####################################################################################################
# DEMONSTRATE INLINE LAMBDA TYPE SIGNATURE SYNTAX
# This will allow you to avoid having to use a cast or a full variable type annotation as it enables
# Claro to "infer" the correct type, as you're explicitly stating it within the lambda expr itself.
####################################################################################################

var doubleFn = (x:int, y:string) -> int {
  _ = y;
  print("doubling:");
  return x * 2;
};

var dumpDouble = lambda (x: int) -> {
  print(doubleFn(x, "ignored"));
};

var getNum = lambda () -> int { return 10; };

dumpDouble(getNum());
