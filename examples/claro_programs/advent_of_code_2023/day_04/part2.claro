alias HitCountAccumulation : mut struct {
  ind: int,
  currWinningNums: mut {string},
  cardMults: mut {int: int},
  totalCards: int
}

resources::Input
  |> files::readOrPanic(^)
  |> strings::split(^, "[\n:|]")
  |> fp::reduce(
        ^,
        (accum: HitCountAccumulation, currStr: string) -> HitCountAccumulation {
          var cardNum = accum.ind / 3 + 1;
          accum.ind = accum.ind + 1;
          match ((accum.ind - 1) % 3) {
            case 0 -> # Start of new Card.
              var currMultiple = maps::getOrDefaultFromMut(accum.cardMults, cardNum, 0) + 1;
              accum.cardMults[cardNum] = currMultiple;
              accum.totalCards = accum.totalCards + currMultiple;
              return accum;
            case 1 -> # Winning numbers.
              accum.currWinningNums = mut {num | num in strings::split(strings::trim(currStr), "\\s") where len(num) > 0};
            case _ -> # Actual numbers.
              _ = sets::retainAll(accum.currWinningNums, [num | num in strings::split(strings::trim(currStr), "\\s")]);
              var matchCount = len(accum.currWinningNums);
              var currMultiple = accum.cardMults[cardNum];
              while (matchCount > 0) {
                var copiedCardNum = cardNum + matchCount--;
                accum.cardMults[copiedCardNum] =
                  maps::getOrDefaultFromMut(accum.cardMults, copiedCardNum, 0) + currMultiple;
              }
          }
          return accum;
        },
        mut {ind = 0, currWinningNums = sets::emptyMutSet(), cardMults = mut {}, totalCards = 0}
     )
  |> print(^.totalCards);
