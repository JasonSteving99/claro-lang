print("We're gonna build a named tuple!");

var t: tuple<int, string> = (1, "at declaration");
type(t);
print(t);

# Tuples can hold all kindsa things inside and can be arbitrary size.
var t2 = ((2, "later after reassignment"), 0, [1,2]);
print(t2);

# Mutable tuples can have their elements reassigned, and Claro will check your indices are in-bounds int literals.
var t3: mut tuple<int, string> = mut (1, "asdf");
print(t3);
t3[0] = 9;
t3[1] = "asfadsfasdf";
print(t3);
# Uncomment the below to see compilation errors.
#t3[99] = -1;
#t3[t[0]] = "x";


function randomChoice(a: int, b: int) -> int {
  # There's no builtin RNG so let's ask the user.
  if (input("Left or right? (L/R): ") == "L") {
    return a;
  } else {
    return b;
  }
}
# Because of the undecidability problem for the general case of tuple-subscripting, IF YOU WANT TO USE A
# NON-INTEGER-LITERAL subscript value, then Claro will not be able to statically determine the type of the value that
# you're referencing. So in that case the programmer must cast the tuple-subscript Expr to a compile-time expected type
# that will be checked at runtime.
var t4 = ("LEFT", "RIGHT", -999);
# Here Claro doesn't know the type at compile-time. Although, you may trust the runtime logic of your program to claim
# you're sure of this type, Claro depends on certain facts, so you must insert a runtime cast to validate your
# assumptions so that the rest of Claro's type checking is not invalidated by a programmer mistake.
# Note this code is intentionally a potential runtime type error, but the programmer has explicitly opted into this by
# explicitly signaling this potential runtime error by way of the noisy cast. Claro is erring on the side of making
# code smellier in cases where it's clearly a potential problem.
# TODO(steving) In the future, I'd likely want to model this situation as returning a oneof<string|RuntimeTypeMismatchErr>.
# Uncomment for compile-time error requiring the explicit cast.
#var castRes = t4[randomChoice(0, 2)];
print("\n\nIf you pick 'R' on the upcoming question you'll trigger a runtime exception!");
var castRes = cast(string, t4[randomChoice(0, 2)]);
print(castRes);
type(castRes);
# However, note that you can very conveniently work with tuple subscripts using literals.
var strVal = t4[1];
print(strVal);
type(strVal);
# For constant tuple subscripts, Claro even does bounds checking for you.
# Uncomment the below for compile-time errors.
#strVal = t4[9];
