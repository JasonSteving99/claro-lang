module MyFirstModule using(FancyPrompter) {

  bind firstBinding:int to 99;
  bind firstBinding:string to "first!";

  bind getInput:provider<string> to getUserInput;

}

module MySecondModule {
  bind newInt:int to 100;

  # It's illegal to have duplicate bindings even across different modules, IFF you use the modules at the
  # same time. You can see Claro will throw a compile-time error for that if you uncomment the following.
#  bind firstBinding:string to "duplicate";

  # Module definitions are forbidden everywhere except for the top level. Uncomment this for a compile error.
#  module NestedModule {
#    bind majorKey:string to "nested";
#  }
}


using(firstBinding:string)
consumer printFirstStringBinding(prefix: string) {
  print("{prefix}: {firstBinding}");
}

using(
  firstBinding:int,
  firstBinding:string as firstString, # You're able to use deps that have the same name by aliasing.
  getInput:provider<string>)
consumer foo(x: int) {
  print(firstBinding);
  print(firstString);
  print(getInput());
  print(x);
}

using(fancyPrompter:function<string -> string>)
provider getUserInput() -> string {
  return fancyPrompter("gimme a string fam");
}

using(MyFirstModule, MySecondModule) {
  printFirstStringBinding("firstBinding");
  foo(10);

  # It's intentionally illegal to define procedures within a using-block. Uncomment this to see Claro
  # give a compile-time error for this.
#  function bar(prompt: string) -> string {
    #    return getInput(prompt);
    #  }
}

# Modules can also be arbitrarily nested!
module WeTheBestModule using(MyFirstDepModule) {
  bind majorKey:string to "anotha one";
}

module MyFirstDepModule using(TransitiveDepsModule) {
  bind something:int to 1000;
}

module TransitiveDepsModule {
  bind boundDep:string to "Transitive Dependencies are Working!!";
}

# You're allowed to successively use modules and they'll operate completely independently.
using(MySecondModule, MyFirstModule) {
  print(getNewInt());

  # You're even allowed to nest using blocks. Modules will compose cleanly as long as none of the nested modules
  # attempt to rebind a key already bound by a module used in the outer block. Note that modules may be reused,
  # either directly as in this example (which is bad style) or as a result of shared transitive module dependencies.
  # Reused modules are actually treated as a no-op since they can be short-circuited at compile-time rather than
  # allowing rebinding, or simply failing.
  using(WeTheBestModule, MyFirstModule) {
    print(getMajorKey("majorKey is bound to"));
  }
}

using(newInt:int)
provider getNewInt() -> int {
  return newInt;
}

using(majorKey:string, firstBinding:string, boundDep:string)
function getMajorKey(s:string) -> string {
  print("This is the firstBinding: {firstBinding}");
  print(boundDep);
  return "{s}: {majorKey}";
}

provider getFancyPrompter() -> function<string -> string> {
  var promptCount = 0;
  return p -> {
    print(promptCount++);
    print("{p}: ");
    return input("");
  };
}

module FancyPrompter {
  bind fancyPrompter:function<string -> string> to getFancyPrompter();
}

function getMockStringGenerator(maxCount:int, mockString:string, doneString:string) -> function<int -> string> {
  var x = 0;

  if (maxCount <= 0) {
    # If we have no terminating condition, just return mockString unconditionally.
    return curr -> {
      _ = curr;
      return mockString;
    };
  }

  # If we have a terminating condition return this generator.
  return curr -> {
    _ = curr;
    if (x++ < maxCount) {
      return mockString;
    } else {
      return doneString;
    }
  };
}

function partiallyApplyInt(fn:function<int -> string>, arg:int) -> provider<string> {
  return () -> fn(arg);
}

# If you've made it this far, here's an illustration to help you imagine what's
# basically the main cool part about Claro's module system. I can create mock bindings for tests.
module ProdModule using(FancyPrompter) {
  bind getDataFromUser:provider<string> to getUserInput;
  bind askUserQuestion:consumer<string> to s -> { print(s); };
  bind dbConnection:function<int -> string> to
    id -> {
      print("You're the DB...give me the question for id: {id}");
      return input("");
    };
}
module TestModule {
  bind getDataFromUser:provider<string> to partiallyApplyInt(getMockStringGenerator(3, "TEST", ""), -1);
  bind askUserQuestion:consumer<string> to s -> { _ = s; };
  bind dbConnection:function<int -> string> to
    id -> {
      _ = id;
      return "TEST";
    };
}

using(askUserQuestion:consumer<string>, getDataFromUser:provider<string>)
provider askUserQuestionsAndGetAnswers() -> int {
  var answerCount = 0;

  askUserQuestion(getNextQuestionFromDb(answerCount));

  while(getDataFromUser() != "") {
    answerCount++;
    askUserQuestion(getNextQuestionFromDb(answerCount));
  }

  # Return the count of how many questions the user answered.
  return answerCount;
}

using(dbConnection:function<int -> string>)
function getNextQuestionFromDb(questionId:int) -> string {
  return dbConnection(questionId);
}

if (input("Should we test instead of run prod? (Y/N): ") == "Y") {
  using(TestModule) {
    print("Testing!");
    if (askUserQuestionsAndGetAnswers() == 3) {
      print("PASSED!");
    } else {
      print("FAILED!");
    }
  }
} else {
  using(ProdModule) {
    var count = askUserQuestionsAndGetAnswers();

    # TODO(steving) I really need to implement a string(x) method that will parse things to strings...it's getting painful.
    print("Thanks for answering the following number of questions!");
    print(count);
  }
}
