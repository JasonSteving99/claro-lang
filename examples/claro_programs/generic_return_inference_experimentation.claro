# Claro's Contract Implementation Inference makes generic function call inference uniquely powerful
# in a way that other languages are not. Claro is able to infer specialization of a generic function
# call with different behavior over the same args by simply requesting a different output type. I'll
# demonstrate a bit below.

contract Index<D, T, V> {
  function get(data: D, index: T) -> V;
}

implement Index<[int], int, int> {
  function get(list: [int], index: int) -> int {
    return list[index];
  }
}

alias Result : tuple<boolean, int>

implement Index<[int], int, Result> {
  function get(list: [int], index: int) -> Result {
    if (index < 0 or len(list) <= index) {
      return (false, -1);
    }
    return (true, list[index]);
  }
}

requires(Index<D, T, V>)
function get<D, T, V>(data: D, index: T) -> V {
  return Index::get(data, index);
}

var l = [10,20,30];

var intRes: int = get(l, 0);
print(intRes);
intRes = get(l, 1);
print(intRes);
# Uncomment this to get a runtime exception.
#intRes = get(l, -1);
#print(intRes);

var safeRes: Result = get(l, 0);
print(safeRes);
safeRes = get(l, 1);
print(safeRes);
# It's no longer a runtime exception to call this function with the exact same args,
# because we're requesting the variant that provides safe output.
safeRes = get(l, -1);
print(safeRes);


################################################################################
# Here's an example where we can utilize the generic return type inference to
# do super clean type conversion that's appropriate for the context in which
# the data being converted is being used.

contract Conversion<I, O> {
  function from(i: I) -> O;
}

implement Conversion<int, string> {
  function from(i: int) -> string {
    if (i == 0) {
      return "ZERO";
    } else if (i > 0) {
      return "POSITIVE";
    }
    return "NEGATIVE";
  }
}

var i = 0;
while (i < 7) {
  # Note, in the future when Claro's StdLib starts getting implemented, this format string will implicitly be checking
  # for exactly this Conversion<T, string> impl, and so the cast won't be necessary at that point.
  print("Curr num: {cast(string, Conversion::from(i++ - 3))}");
}

################################################################################
# Here's another example where you can actually query a table by column type.
# Pardon the hacky setup for column type aliases - realistically you'd want to
# have some codegen for these types.

alias ID : int # This is always used as an index into the Table, don't bother defining a newtype.
newtype Name : string
newtype Age : int
newtype Birthday : string
newtype PhoneNumber : string
newtype Row : tuple<Name, Age, Birthday, PhoneNumber>
# TODO(steving) Once Claro supports copy-free builder semantics via unique_ref<T>, rewrite this alias to define Table
# TODO(steving)     without the mutable modifier so that mutability can be optional for this type.
# TODO(steving) Once Claro supports overriding collection subscript (i.e. `[i]`) refactor Table to be a newtype.
alias Table : mut [Row] # ID is just the index.

function createRow(name: string, age: int, birthday: string, phonenumber: string) -> Row {
  return Row((Name(name), Age(age), Birthday(birthday), PhoneNumber(phonenumber)));
}

contract ColumnAccess<C> {
  function get(t: Table, id: ID) -> C;
}

implement ColumnAccess<Name> {
  function get(t: Table, id: ID) -> Name {
    var row = t[id];
    return unwrap(row)[0];
  }
}

implement ColumnAccess<Age> {
  function get(t: Table, id: ID) -> Age {
    var row = t[id];
    return unwrap(row)[1];
  }
}

implement ColumnAccess<Birthday> {
  function get(t: Table, id: ID) -> Birthday {
    var row = t[id];
    return unwrap(row)[2];
  }
}

implement ColumnAccess<PhoneNumber> {
  function get(t: Table, id: ID) -> PhoneNumber {
    var row = t[id];
    return unwrap(row)[3];
  }
}

implement ColumnAccess<Row> {
  function get(t: Table, id: ID) -> Row {
    return t[id];
  }
}

# TODO(steving) Once Claro supports copy-free builder semantics via unique_ref<T>, rewrite these functions to return
# TODO(steving)     immutable collections instead of mutable ones.
requires(ColumnAccess<C>)
function Where<C>(table: Table, pred: function<C -> boolean>) -> Table {
  var res: Table = mut [];
  var i = 0;
  while (i < len(table)) {
    if (pred(ColumnAccess::get(table, i))) {
      # TODO(steving) Need to migrate away from append from builtin_functions.claro_internal once generic procedure exports are fully supported.
      # TODO(steving)     Currently the issue here is that the UserDefinedType Metadata isn't getting passed down into the
      # TODO(steving)     dep module monomorphization subprocess since the user-defined types are nested.
      UNFORTUNATE_DEFAULT_IMPL_OF_append_THAT_WILL_BE_REMOVED_SOON(res, table[i]);
    }
    i++;
  }
  return res;
}

requires(ColumnAccess<C>)
function getTableColumn<C>(table: Table) -> mut [C] {
  var res: mut [C] = mut [];
  var i: ID = 0;
  while (i < len(table)) {
    # TODO(steving) TESTING!!! CLARO'S GENERICS TYPE INFERENCE SUFFERS FROM A LIMITATION THAT WON'T TYPE CHECK THIS:
    # lists::add(res, ColumnAccess::get(table, i++));
    var toAppend: C = ColumnAccess::get(table, i++);
    lists::add(res, toAppend);
  }
  return res;
}

function select<C1, C2>(table: Table) -> mut [tuple<C1, C2>] {
  var c1: mut [C1] = getTableColumn(table);
  var c2: mut [C2] = getTableColumn(table);
  var res: mut [tuple<C1, C2>] = mut [];
  var i = 0;
  while (i < len(table)) {
    # TODO(steving) Need to migrate away from append from builtin_functions.claro_internal once generic procedure exports are fully supported.
    # TODO(steving)     Currently the issue here is that the UserDefinedType Metadata isn't getting passed down into the
    # TODO(steving)     dep module monomorphization subprocess since the user-defined types are nested.
    UNFORTUNATE_DEFAULT_IMPL_OF_append_THAT_WILL_BE_REMOVED_SOON(res, (c1[i], c2[i]));
    ++i;
  }
  return res;
}

function And<C1, C2>(pred1: function<C1 -> boolean>, pred2: function<C2 -> boolean>)
    -> function<Row -> boolean> {
  return binaryCond(lambda (b1, b2) -> b1 and b2, pred1, pred2);
}

function Or<C1, C2>(pred1: function<C1 -> boolean>, pred2: function<C2 -> boolean>)
    -> function<Row -> boolean> {
  return binaryCond(lambda (b1, b2) -> b1 or b2, pred1, pred2);
}

requires(ColumnAccess<C1>, ColumnAccess<C2>)
function binaryCond<C1, C2>(
    op: function<|boolean, boolean| -> boolean>,
    pred1: function<C1 -> boolean>,
    pred2: function<C2 -> boolean>) -> function<Row -> boolean> {
  return row -> {
    var rowAsTable: Table = mut [row];
    return op(pred1(ColumnAccess::get(rowAsTable, 0)), pred2(ColumnAccess::get(rowAsTable, 0)));
  };
}

# Required contract validation works across transitive requirements. Uncomment this line to see Claro give a compile
# time error that And cannot be called over the (int, int) concrete type because ColumnAccess<(int, int)> isn't
# implemented. This is correctly warned about here at the callsite to And even though this requirement is transitively
# propagated from binaryCond() which is called within And().
#
#print(And((function<tuple<int, int> -> boolean>) x -> x == x, (function<tuple<int, int> -> boolean>) x -> x == x));

var table: Table =
  mut [
    createRow("Jason", 28, "MM/DD/YYY", "(XXX)XXX-XXXX"),
    createRow("Lisa", 22, "MM/DD/YYY", "(YYY)YYY-YYYY"),
    createRow("Laura", 27, "MM/DD/YYY", "(XXX)XXX-XXXX"),
    createRow("George", 52, "MM/DD/YYY", "(ZZZ)ZZZ-ZZZZ")
  ];

print("\n\n--------------------------------------------------");
print("We're going to do some test queries over this table:");
i = 0;
print("[");
while (i < len(table)) {
  print(table[i++]);
}
print("]");

print("\n\nDump all names in table:");
var names: mut [Name] = getTableColumn(table);
print(names);

print("Dump all ages in table:");
var ages: mut [Age] = getTableColumn(table);
print(ages);

print("Dump all birthdays in table:");
var birthdays: mut [Birthday] = getTableColumn(table);
print(birthdays);

print("Dump all phonenumbers in table:");
var phonenumbers: mut [PhoneNumber] = getTableColumn(table);
print(phonenumbers);

print("\n\nFilter table for names of people where age > 25");
table
  |> Where(^, (a: Age) -> boolean { return unwrap(a) > 25; })
  |> cast(mut [Name], getTableColumn(^))
  |> print(^);

print("\n\nFilter table for names of people where 25 < age < 50 excluding Laura.");
table
  |> Where(^, And((a: Age) -> boolean { return unwrap(a) > 25; }, (a: Age) -> boolean { return unwrap(a) < 50; }))
  |> Where(^, (n: Name) -> boolean { return n != Name("Laura"); })
  |> cast(mut [tuple<Name, Age>], select(^))
  |> print(^);

# This approach is more convoluted, but I'm flexing the generic calls to defer to multiple specializations of each
# generic function to ensure that multiple specializations are supported.
print("Another way to do the same thing by chaining calls to And.");
(a: Age) -> boolean { return unwrap(a) > 25; }
  |> And(^, (a: Age) -> boolean { return unwrap(a) < 50; }) # Calling: And<Age, Age>(...) -> function<Row -> boolean>
  |> And(^, (n: Name) -> boolean { return n != Name("Laura"); })    # Calling: And<Row, Name>(...) -> function<Row -> boolean>
  |> Where(table, ^)                                           # Calling: where<function<Row -> boolean>>(...) -> Table
  |> cast(mut [tuple<Name, Age>], select(^))                            # Calling: select<Name, Age>(...) -> [tuple<Name, Age>]
  |> print(^);


# Just try another syntax, avoiding the pipelining just to see if this is a more readable approach. Also using Or().
print("Filter table for names of people where either Name is George, or 25 < age < 50 excluding Laura.");
var res: mut [tuple<Name, Age>] =
  select(      # Calling: select<Name, Age>(...) -> [tuple<Name, Age>]
    Where(     # Calling: where<function<Row -> boolean>>(...) -> Table
      table,
      Or(
        And(   # Calling: And<Row, Name>(...) -> function<Row -> boolean>
          And( # Calling: And<Age, Age>(...) -> function<Row -> boolean>
            (a: Age) -> boolean { return unwrap(a) > 25; },
            (a: Age) -> boolean { return unwrap(a) < 50; }
          ),
          (n: Name) -> boolean { return n != Name("Laura"); }
        ),
        (n: Name) -> boolean { return n == Name("George"); }
      )
    )
  );

print(res);

