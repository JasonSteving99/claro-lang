##############################################
# Declaration w/ Simultaneous Initialization #
##############################################

print("Declaration w/ Simultaneous Initialization");

# **** Primitives. ****
var i: int = 1;
print(i);
type(i);

var f: float = 1.0;
print(f);
type(f);

var s: string = "one";
print(s);
type(s);

var b: boolean = s == "one";
print(b);
type(b);

# **** Non-empty lists. ****

var intList: [int] = [i, 2 * i, 4 * i];
print(intList);
type(intList);

var floatList: [float] = [f, 2 * f, 4 * f];
print(floatList);
type(floatList);

var stringList: [string] = [s, s, s];
print(stringList);
type(stringList);

# **** Empty lists: ****

var emptyIntList: [int] = [];
# emptyIntList.append(i).append(2 * i).append(4 * i);
# print(emptyIntList == intList);
print(emptyIntList);
type(emptyIntList);

var emptyFloatList: [float] = [];
# emptyFloatList.append(f).append(2 * f).append(4 * f);
# print(emptyFloatList == floatList);
print(emptyFloatList);
type(emptyFloatList);

var emptyStringList: [string] = [];
# emptyStringList.append(s).append(s).append(s);
# print(emptyStringList == stringList);
print(emptyStringList);
type(emptyStringList);

###############################################
# Declaration w/o Simultaneous Initialization #
###############################################

print("Declaration w/o Simultaneous Initialization");

# **** Primitives. ****
var i2: int;
i2 = 1;
print(i2);
type(i2);

var f2: float;
f2 = 1.0;
print(f2);
type(f2);

var s2: string;
s2 = "one";
print(s2);
type(s2);

# **** Non-empty lists. ****

var intList2: [int];
intList2 = [i, 2 * i, 4 * i];
print(intList2);
type(intList2);

var floatList2: [float];
floatList2 = [f, 2 * f, 4 * f];
print(floatList2);
type(floatList2);

var stringList2: [string];
stringList2 = [s, s, s];
print(stringList2);
type(stringList2);

# **** Empty lists: ****

var emptyIntList2: [int];
emptyIntList2 = [];
print(emptyIntList2);
type(emptyIntList2);

var emptyFloatList2: [float];
emptyFloatList2 = [];
print(emptyFloatList2);
type(emptyFloatList2);

var emptyStringList2: [string];
emptyStringList2 = [];
print(emptyStringList2);
type(emptyStringList2);


########################################################################################################################
# DEMONSTRATE UTILIZING AN ALIAS TYPE DEF FROM WITHIN A PROCEDURE TEXTUALLY BEFORE IT'S DEFINITION
#
# This is only interesting as a test validating that prior limitations are worked out. Previously you couldn't reference
# a top level alias definition within a procedure *unless* the Alias type had already been resolved by way of some usage
# of the Alias type in some top-level stmt.
########################################################################################################################

provider doFoo() -> int {
  var foo: Foo = -9000;
  return foo;
}
alias Foo: int

print(doFoo());