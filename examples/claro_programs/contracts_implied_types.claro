
########################################################################################################################
# Various languages have a notion of "Associated Types"...
#   e.g.
#     - Rust: https://doc.rust-lang.org/rust-by-example/generics/assoc_items/types.html
#     - Swift: https://docs.swift.org/swift-book/documentation/the-swift-programming-language/generics/#Associated-Types
#
# However, I find the terminology to sound a bit unfamiliar and maybe even causes me to instinctively assume that
# the concept revolves around some complicated type theoretic complexity. This may not be the case for everyone, but as
# language designer, I'll work from a basis of my own perspective.
#
# The concept that's really being expressed by "Associated Types" is that, during type inference, some type(s) are
# logically *implied* by the knowledge of other types. That's it. That's the whole concept boiled down to a nutshell.
# Hence, in Claro, we'll refer to this concept by "*Implied* Types" rather than "Associated Types".
#
# From a programming language semantics perspective, by defining a certain Contract to have some types implied by other
# types, you are defining a *constraint* on the possible set of implementations that could exist in the same program
# without violating that implication.
#
# In particular, take the below `contract Add<A, B => C>` for example. This contract's definition implies that for any
# given concrete types A, B that Add is implemented over, there is a *single, unique* concrete type C. Claro will
# statically reject any attempt to define implementations of this contract with different concrete types for C, given
# the same concrete types A, B (as that would violate the constraint imposed by the contract's definition).
########################################################################################################################

contract Add<A, B => C> {
  function add(lhs: A, rhs: B) -> C;
}

implement Add<int, int, int> {
  function add(lhs: int, rhs: int) -> int {
    return lhs + rhs;
  }
}
implement Add<string, string, string> {
  function add(lhs: string, rhs: string) -> string {
    return "{lhs}{rhs}";
  }
}

# Uncomment this below impl to see Claro statically reject the existence of two contract impls which violate the
# Contract Definition's constraint that Type C must be unique for any concrete args A, B.

#implement Add<int, int, string> {
#  function add(lhs: int, rhs: int) -> string {
#    return "{lhs + rhs}";
#  }
#}


# Here's the power of implied types, Claro is able to statically infer return types of Contract Procedures that are
# defined as having generic return types (over the implied contract type param(s)). No contextual type assertions are
# necessary whatsoever!
var intRes = Add::add(Add::add(1, 1), 2);
print(intRes);
var strRes = Add::add("Implied types ", Add::add("are awesome", "!"));
print(strRes);


# TODO(steving) Come back and add to the above example once Claro's `+` operator can be implemented by the Add contract.
# TODO(steving)   The code will become extremely clean.
#var strRes = "Implied types " + "are awesome" + "!";