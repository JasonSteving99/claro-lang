
# This encodes the public API of the Buggy-Buggies site available at https://buggy-buggies.gigalixirapp.com/.
# Claro will generate a non-blocking RPC client for you via the following:
#   `var myClient: HttpClient<BuggyBuggies> = getHttpClient("https://buggy-buggies.gigalixirapp.com");`
HttpService BuggyBuggies {
  hostGame: "/api/host/{handle}",
  friendsJoin: "/api/game/{gameId}/join/{handle}",
  move: "/api/game/{gameId}/player/{secret}/move/{direction}",
  worldInfo: "/api/game/{gameId}/player/{secret}/info",
  reset: "/api/game/{gameId}/player/{secret}/reset"
}

# Now there's a single static definition of which client will be used for sending reqs to the Buggy Buggies server.
static HTTP_CLIENT: HttpClient<BuggyBuggies>;

# This type models the JSON response from the Buggy-Buggies service as a Claro type to enable parsing the response into
# something that you can work with programmatically with strict type validation on the edge.
alias MoveResponse : struct {
  reason: oneof<string, std::Nothing>,
  result: struct {
    players: { string : struct { x: int, y: int } },
    dimensions: struct {
      height: int,
      width: int
    },
    world: { string: string }, # E.g. ("0,6": "wall")
    you: struct {
      handle: string,
      purse: int,
      boom: boolean,
      x: int,
      y: int
    }
  },
  success: boolean
}

function getParsedMoveResponse(buggyResponse: string) -> std::ParsedJson<MoveResponse>;
