########################################################################################################################
# Aliases are a powerful feature that allow the expression of arbitrary types. In their simplest form, they may be used
# as syntactic sugar to reduce keystrokes and cognitive overhead from typing out a full type literal. (This is not the
# full extent of type aliases, as they allow expression of recursive types that are otherwise impossible to represent
# via a type literal, so continue to the next example for a demo of that).
########################################################################################################################

alias IntsTo2TupleFn: function<|int, int| -> tuple<int, int>> # You can imagine typing this out is verbose/annoying.

var swapped: IntsTo2TupleFn = lambda (a, b) -> (b, a);
print("swapped(1, 2) -> {swapped(1, 2)}");
var doubled: IntsTo2TupleFn = lambda (a, b) -> (2*a, 2*b);
print("doubled(1, 2) -> {doubled(1, 2)}");

type(doubled);
var ddd: [IntsTo2TupleFn] = [doubled];
type(ddd);
type(doubled);

########################################################################################################################
# To be absolutely clear, Aliases are *not* syntactic sugar. Without aliases there would be no way to define a recursive
# data type without resorting to defining a top-level struct.
########################################################################################################################

# TODO(steving) Rewrite this example w/ oneof<int, [IntOrList]> when supported.
alias IntOrList : tuple<boolean, int, mut [IntOrList]>

print("All of the following values satisfy the type definition for IntOrList:");
var myIntOrList: IntOrList;
myIntOrList = (true, 9, mut []);
print(myIntOrList);

myIntOrList = (false, -1, mut []);
print(myIntOrList);

myIntOrList = (false, -1,
  mut [
    (true, 2, mut []),
    (false, -1,
      mut [
        (false, -1, mut []),
        (true, 99, mut [])
      ]
    )
  ]
);
print(myIntOrList);

append(myIntOrList[2], (true, 999, mut []));
print(myIntOrList);

var innerListOfIntOrList: mut [IntOrList] = myIntOrList[2][0][2];
append(innerListOfIntOrList, (true, 100, mut []));
print(myIntOrList);

# TODO(steving) Claro doesn't really have support for empty sets at the moment, but they're necessary to ever use an
# TODO(steving) alias that defines a recursive self reference to a set type. So update this test when empty sets are supported.
#alias NestedSet : {NestedSet}
#var myNestedSet: NestedSet = {{}, {}};


alias NestedMap : mut {int: tuple<int, NestedMap>}
var myNestedMap: NestedMap = mut {};
print(myNestedMap);
myNestedMap[1] = (1, mut {});
print(myNestedMap);
myNestedMap[2] = (2, mut {2: (2, mut {}), 3: (3, mut {999: (999, mut {})}), 4: (4, mut {})});
print(myNestedMap);
var myNestedMap2: NestedMap = myNestedMap[1][1];
print(myNestedMap2);
var incompatibleWrapper: mut {int: tuple<int, NestedMap>} = mut {10: (10, mut {10: (10, mut {9: (9, mut {})})})};
print(incompatibleWrapper);
var val = 9 in incompatibleWrapper[10][1];
print(val);
incompatibleWrapper = myNestedMap2;
print(incompatibleWrapper);
# myNestedMap2 = incompatibleWrapper; # Uncomment for compile-time type mismatch.
#                ^^^^^^^^^^^^^^^^^^^
# It may seem unexpected if you stare closely, but there's no clean safe way for Claro to identify that arbitrary
# structures are equivalent to the original recursive definition. Not bc Claro can't typecheck this, but actually bc
# when compiling down to JavaSource, we're going to have all sorts of generic type inconsistencies between the two.
# So Claro will forbid this assignment. I'm satisfied with this for now unless some insight comes up later.

alias NestedList : mut [NestedList]
var myNestedList: NestedList = mut[];
print(myNestedList);
append(myNestedList, mut[]);
print(myNestedList);
append(myNestedList, mut [mut[], mut[], mut[mut[], mut[mut[]]]]);
print(myNestedList);
myNestedList[1] = mut [];
print(myNestedList);
var myNestedList2: mut [NestedList] = myNestedList[1];
print(myNestedList2);
var containsRecursiveType: {int : tuple<int, [NestedList]>} = {10 : (10, [myNestedList, mut []])};
myNestedList2 = containsRecursiveType[10][1][1];
print("myNestedList2: {myNestedList2}");


# Type aliases are *not* new type definitions, they are aliases as the name says, therefor they are interchangeable with
# one another so long as they are structurally equivalent. This is by design.
alias AltNestedList : [AltNestedList]
var myAltNestedList: mut AltNestedList = mut [];
myAltNestedList = myNestedList; # Here, I'm assigning a `NestedList` to a var declared as `AltNestedList`.
print(myAltNestedList);

########################################################################################################################
# Type Aliases may also be used within Procedure Definitions and they will be scoped locally to the procedure only.
########################################################################################################################

function foo(x: int) -> int {
  alias Bar : tuple<int, [Bar]>
  var res: Bar = (x, []);
  return res[0];
}
print("Also, aliases work within procedure definitions: {foo(99)}");
# Uncomment to demonstrate that Bar is not known at this outer scope, since it's defined w/in the procedure above.
#var broken: Bar = 10;

########################################################################################################################
# Some recursive aliases like the following should be rejected at compile-time because they're impossible to instantiate.
# Uncomment the below lines to get compile time warnings from Claro indicating that these types aren't usable.
########################################################################################################################
#alias IllegalUnboundedRecursiveAlias : tuple<int, IllegalUnboundedRecursiveAlias>
#alias InfiniteRecursion : InfiniteRecursion
#alias PartialUnbounded : tuple<PartialUnbounded, [PartialUnbounded]>
